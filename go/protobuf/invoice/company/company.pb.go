// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/invoice/company/company.proto

package company

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("protobuf/invoice/company/company.proto", fileDescriptor_34b3c4ce12362f82)
}

var fileDescriptor_34b3c4ce12362f82 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0xcf, 0xcc, 0x2b, 0xcb, 0xcf, 0x4c, 0x4e, 0xd5, 0x4f, 0xce, 0xcf,
	0x2d, 0x48, 0xcc, 0xab, 0x84, 0xd1, 0x7a, 0x60, 0x05, 0x42, 0xf2, 0x49, 0xa9, 0x45, 0x79, 0x89,
	0x45, 0x29, 0xf9, 0xc5, 0xa9, 0xc9, 0x89, 0x29, 0xa9, 0xc5, 0x7a, 0x50, 0xe5, 0x7a, 0x50, 0x65,
	0x52, 0xd2, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x70, 0xf3, 0x52, 0x73, 0x0b, 0x4a, 0xa0,
	0xba, 0x8d, 0x02, 0xb9, 0xf8, 0x9c, 0x21, 0xea, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85,
	0xec, 0xb9, 0x78, 0x83, 0x2b, 0xf3, 0x92, 0x21, 0xa2, 0x99, 0xa9, 0xc5, 0x42, 0x62, 0x7a, 0x10,
	0x03, 0xf4, 0x60, 0x06, 0xe8, 0xb9, 0x82, 0x0c, 0x90, 0xc2, 0x21, 0xee, 0xc4, 0x19, 0xc5, 0x0e,
	0xb5, 0x3a, 0x89, 0x0d, 0x2c, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x15, 0x94, 0xa6, 0xca,
	0xcc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyServiceClient interface {
	SyncCompanies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) SyncCompanies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bernardosecades.invoice.company.CompanyService/SyncCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
type CompanyServiceServer interface {
	SyncCompanies(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedCompanyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (*UnimplementedCompanyServiceServer) SyncCompanies(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCompanies not implemented")
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_SyncCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).SyncCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bernardosecades.invoice.company.CompanyService/SyncCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).SyncCompanies(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bernardosecades.invoice.company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncCompanies",
			Handler:    _CompanyService_SyncCompanies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/invoice/company/company.proto",
}
